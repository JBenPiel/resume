image:
  name: hashicorp/terraform:0.14.3
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

stages:
  - Test and Lint
  - Build and Push
  - Stage Plan
  - Stage Apply
  - Production Plan
  - Production Apply
  - Destroy

Validate Terraform:
  stage: Test and Lint
  script:
    - cd terraform/
    - terraform init -backend=false
    - terraform init validate
    - terraform fmt -check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|stage)$/ || $CI_COMMIT_BRANCH =~ /^(master|stage)$/'

Build and Push:
  image: docker:20.10
  services:
    - docker:20.10-dind
  stage: Build and Push
  script:
    - apk add python3 py3-pip
    - pip3 install awscli
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/e7k4f6o3
    - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA -t $ECR_REPO:latest .
    - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA && docker push $ECR_REPO:latest
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|stage)$/'

Stage Plan:
  stage: Stage Plan
  script:
    - cd terraform/
    - export TF_VAR_ecr_image_app=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select stage || terraform workspace new stage
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "stage"'

Stage Apply:
  stage: Stage Apply
  script:
    - cd terraform/
    - export TF_VAR_ecr_image_app=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select stage
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "stage"'
      when: manual

Production Plan:
  stage: Production Plan
  script:
    - cd terraform/
    - export TF_VAR_ecr_image_app=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select prod || terraform workspace new prod
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

Production Apply:
  stage: Production Apply
  script:
    - cd terraform/
    - export TF_VAR_ecr_image_app=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select prod
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

Stage Destroy:
  stage: Destroy
  script:
    - cd terraform/
    - terraform init
    - terraform workspace select stage
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "stage"'
      when: manual

Production Destroy:
  stage: Destroy
  script:
    - cd terraform/
    - terraform init
    - terraform workspace select prod
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: delayed
      start_in: '14 hours'
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
