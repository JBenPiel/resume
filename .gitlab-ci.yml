image:
  name: hashicorp/terraform:0.14.2
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

stages:
  - Test and Lint
  - Build and Push
  - Production Plan
  - Production Apply
  - Destroy

Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    - terraform init -backend=false
    - terraform init validate
    - terraform fmt -check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_COMMIT_BRANCH == "master"'

Build and Push:
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  stage: Build and Push
  script:
    - apk add python3 py3-pip
    - pip3 install awscli
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA -t $ECR_REPO:latest .
    - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA && docker push $ECR_REPO:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

Production Plan:
  stage: Production Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_app=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select prod || terraform workspace new prod
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

Production Apply:
  stage: Production Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_app=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select prod
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

# Production Destroy:
#   stage: Destroy
#   script:
#     - cd deploy/
#     - terraform init
#     - terraform workspace select prod
#     - terraform destroy -auto-approve
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "master"'
#       when: manual
